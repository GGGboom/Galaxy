<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.Galaxy.dao.CommentsMapper">
    <!--<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.Galaxy.entity.Comments">-->
    <!--<result column="comment_content" jdbcType="LONGVARCHAR" property="commentContent" />-->
    <!--</resultMap>-->
    <resultMap id="BaseResultMap" type="com.example.Galaxy.entity.Comments">
        <result column="comment_id" jdbcType="BIGINT" property="commentId"/>
        <result column="blog_id" jdbcType="BIGINT" property="blogId"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar"/>
        <result column="parent_comment_id" jdbcType="BIGINT" property="parentCommentId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="comment_like_account" jdbcType="BIGINT" property="commentLikeAccount"/>
        <result column="is_deleted" jdbcType="BIT" property="isDeleted"/>
        <result column="is_read" jdbcType="BIT" property="isRead"/>
        <result column="comment_content" jdbcType="LONGVARCHAR" property="commentContent"/>
    </resultMap>
    <resultMap id="RecursiveMap" type="com.example.Galaxy.entity.Comments" extends="BaseResultMap">
        <collection property="childrenList" ofType="com.example.Galaxy.entity.Comments"
                    select="com.example.Galaxy.dao.CommentsMapper.getAllByParent"
                    column="{parentCommentId = comment_id,blogId = blog_id}">
        </collection>
    </resultMap>
    <sql id="Blob_Column_List">
      comment_content
    </sql>
    <insert id="insert" parameterType="com.example.Galaxy.entity.Comments">
    insert into comments (comment_id, blog_id, user_id, 
      user_avatar, parent_comment_id, create_time, 
      update_time, comment_like_account, is_deleted, 
      is_read, comment_content)
    values (#{commentId,jdbcType=BIGINT}, #{blogId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, 
      #{userAvatar,jdbcType=VARCHAR}, #{parentCommentId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{commentLikeAccount,jdbcType=BIGINT}, #{isDeleted,jdbcType=BIT}, 
      #{isRead,jdbcType=BIT}, #{commentContent,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.example.Galaxy.entity.Comments">
        insert into comments
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                comment_id,
            </if>
            <if test="blogId != null">
                blog_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="userAvatar != null">
                user_avatar,
            </if>
            <if test="parentCommentId != null">
                parent_comment_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="commentLikeAccount != null">
                comment_like_account,
            </if>
            <if test="isDeleted != null">
                is_deleted,
            </if>
            <if test="isRead != null">
                is_read,
            </if>
            <if test="commentContent != null">
                comment_content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                #{commentId,jdbcType=BIGINT},
            </if>
            <if test="blogId != null">
                #{blogId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="userAvatar != null">
                #{userAvatar,jdbcType=VARCHAR},
            </if>
            <if test="parentCommentId != null">
                #{parentCommentId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentLikeAccount != null">
                #{commentLikeAccount,jdbcType=BIGINT},
            </if>
            <if test="isDeleted != null">
                #{isDeleted,jdbcType=BIT},
            </if>
            <if test="isRead != null">
                #{isRead,jdbcType=BIT},
            </if>
            <if test="commentContent != null">
                #{commentContent,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateSelective" parameterType="com.example.Galaxy.entity.Comments">
        update comments
        <set>
            <if test="blogId!=null">
                blog_id=#{blogId,jdbcType=BIGINT},
            </if>
            <if test="userId!=null">
                user_id=#{userId,jdbcType=BIGINT},
            </if>
            <if test="userAvatar!=null and userAvatar!=''">
                user_avatar=#{userAvatar,jdbcType=BIGINT},
            </if>
            <if test="parentCommentId!=null">
                parent_comment_id=#{parentCommentId,jdbcType=BIGINT},
            </if>
            <if test="createTime!=null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime!=null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="commentLikeAccount!=null">
                comment_like_account=#{commentLikeAccount,jdbcType=BIGINT},
            </if>
            <if test="isDeleted!=null">
                is_deleted = #{isDeleted,jdbcType=BIT},
            </if>
            <if test="isRead!=null">
                is_read = #{isRead,jdbcType=BIT},
            </if>
            comment_id = #{commentId,jdbcType=BIGINT}
        </set>
        where comment_id = #{commentId,jdbcType=BIGINT}
    </update>


    <select id="getAllByParent" resultMap="RecursiveMap">
      select *
      from comments
      where parent_comment_id = #{parentCommentId,jdbcType=BIGINT} and blog_id = #{blogId,jdbcType=BIGINT}
    </select>
    <select id="getUnread" resultType="java.lang.Long">
      SELECT COUNT(is_read)
      FROM `comments`
      WHERE is_read = 0 and user_id!=#{userId,jdbcType=BIGINT} and blog_id in (
          SELECT blog_id
          FROM blog
          WHERE user_id = #{userId,jdbcType=BIGINT});
    </select>
</mapper>